def GitBuildBadge = addEmbeddableBadgeConfiguration(id: "jenkinsbuild", subject: "Jenkins Build")
pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: buildah
    image: betalabsk8sacr.azurecr.io/buildah:v1.21
    securityContext:
      privileged: true
    command:
    - cat
    tty: true
  - name: kubectl
    image: betalabsk8sacr.azurecr.io/kubectl:v1
    command:
    - cat
    tty: true   
  - name: sops
    image: betalabsk8sacr.azurecr.io/sops:v2
    command:
    - cat
    tty: true
  tolerations:
  - key: "kubernetes.azure.com/scalesetpriority"
    operator: "Equal"
    value: "spot"
    effect: "NoSchedule"              
'''
            defaultContainer 'shell'
        }
    }

/*       triggers {
      GenericTrigger(
      genericVariables: [
                        [key: 'action', value: '$.action'],
                        [key: 'merged', value: '$.pull_request.merged'],
                        [key: 'ref', value: '$.pull_request.base.ref']
                ],
                causeString: 'Triggered on pr merge',
                token: "_job_name",
                printContributedVariables: true,
                printPostContent: true,
                silentResponse: false,
                regexpFilterText: '$action#$merged#$ref',
                regexpFilterExpression: 'closed#true#staging'
      )
    } */

   stages {              

     stage('load env') {
                  steps {
                      container('buildah') {
                      load "Jenkins/Jenkinsenv"
                          script{
                            //config branch deploy
                              DEPLOY = env.GIT_BRANCH == "origin/master" ? "production" : "staging"
                              HOST = env.GIT_BRANCH == "origin/master" ? "${PRDHOST}" : "${STGHOST}"
                              env.ENCRYPT_SEC = "devops-deployment-env/${APPNAME}/${DEPLOY}/secrets.enc.env"                              
                          }                        
                        echo "repo:${GIT_REPO}"
                        echo "branch:${GIT_BRANCH}"
                        echo "env repo: ${GIT_ENV_REPO}"
                        echo "env file: ${env.ENCRYPT_SEC}"
                      }
                  }        
            }            


        stage('config env') {
            steps {
              container('sops') {
            withCredentials([sshUserPrivateKey(credentialsId: "${GITCRED}", keyFileVariable: 'keyfile')]) {
                sh "mkdir ~/.ssh/"
                sh 'ssh-agent /bin/bash' 
                sh 'ssh-keyscan github.com  >> ~/.ssh/known_hosts' 
                sh "eval \"\$(ssh-agent)\" && ssh-add ${keyfile} && ssh-add -l && git clone ${GIT_ENV_REPO}"      
                }   
                
           withCredentials([file(credentialsId: 'jenkins-sops-pvt-key', variable: 'FILE')]) {
              sh 'gpg --import $FILE'    
              sh "gpg --list-keys"
              sh "sops -d ${env.ENCRYPT_SEC} > ${DECRYPT_SEC}"                
            }                               

                 sh "sops -v" 
                 sh "ls ./"
                 sh "cat ${env.ENCRYPT_SEC}"                            
                }
            }
    }



    stage('build image') {
      steps {
        container('buildah') {
            //get git commit hash version
            script{
                def GIT_TAG = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                env.git_tag = "${GIT_TAG}"
                 }
            withCredentials([usernamePassword(credentialsId: 'betalabsk8sacr', passwordVariable: 'PWD', usernameVariable: 'USER')]) {
                  sh "buildah login -u=${USER} -p=${PWD} betalabsk8sacr.azurecr.io"
                  sh  "buildah bud -t ${APPIMG}:${GIT_TAG}"
                  }
        }
      }
    }

        stage('Push image') {
        steps {
            container('buildah') {
            withCredentials([usernamePassword(credentialsId: 'betalabsk8sacr', passwordVariable: 'PWD', usernameVariable: 'USER')]) {
                  sh "buildah login -u=${USER} -p=${PWD} betalabsk8sacr.azurecr.io"
                  sh "buildah push ${APPIMG}:${GIT_TAG}"
                  }            
            }
        }
    }

        stage('config deploy') {
            steps {
                container('kubectl') {                 
                    sh "sed -i -e \'s,\'_env\',\'${DEPLOY}\',g\' ${TARGET_DIR}/deploy.yaml"
                    sh "sed -i -e \'s,\'_appname\',\'${APPNAME}\',g\' ${TARGET_DIR}/deploy.yaml"
                    sh "sed -i -e \'s,\'_appport\',\'${APPPORT}\',g\' ${TARGET_DIR}/deploy.yaml"
                    sh "sed -i -e \'s,\'_appimg\',\'${APPIMG}:${GIT_TAG}\',g\' ${TARGET_DIR}/deploy.yaml"
                    sh "sed -i -e \'s,\'_host\',\'${HOST}\',g\' ${TARGET_DIR}/deploy.yaml"
                    
                    sh "cat ${TARGET_DIR}/deploy.yaml"
                    }
                }    
            }
            
        stage('aks staging deploy') {
              when{
                expression {
                  return env.GIT_BRANCH == "origin/staging" || env.GIT_BRANCH.startsWith("origin/cicd-")
                }
              }               
            steps {
                    container('kubectl') {
                        withCredentials([file(credentialsId: 'stg-aks-hk-config', variable: 'FILE')]) {
                            sh "cp ${FILE} /root/.kube/"
                        }
                        sh "kubectl delete secret ${DECRYPT_SEC} -n ${NS} || true"
                        sh "kubectl create secret generic ${DECRYPT_SEC} --from-file=${DECRYPT_SEC} -n ${NS} || true"
                        sh "kubectl apply -f ${TARGET_DIR}/deploy.yaml -n ${NS}"
                        sh "kubectl get ing -n ${NS}"
                      }
                        script{env.STAGING = 1} 
                  }
        }



         stage('aks production deploy') {
              when{
                expression {
                  return env.GIT_BRANCH == "origin/master"
                } 
              }            
              steps {
                      container('kubectl') {
                        script{
                            env.PROD  = 1
                            def remote = [:]
                            remote.name = "kubectl-server"
                            remote.host = "${PRDAKS}"
                            remote.allowAnyHosts = true
                            env.secret = "${DECRYPT_SEC}"
                            env.yaml = "${TARGET_DIR}/deploy.yaml"
                            env.ns = "${NS}"
                            env.appname = "${APPNAME}"

                            withCredentials([sshUserPrivateKey(credentialsId: 'aks-hk-prod-kubctl-ssh', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
                            remote.user = userName
                            remote.identityFile = identity
                            remote.allowAnyHosts = true
                                        sshPut remote: remote, from: env.yaml , into: '.'
                                        sshPut remote: remote, from: env.secret , into: '.'
                                        sshCommand remote: remote, command: "kubectl delete secret $env.secret -n $env.ns || true"
                                        sshCommand remote: remote, command: "kubectl create secret generic $env.secret --from-file=$env.secret -n $env.ns"
                                        sshCommand remote: remote, command: "kubectl apply -f deploy.yaml -n $env.ns"
                                        sshCommand remote: remote, command: "kubectl get svc -n $env.ns"
                                        sshCommand remote: remote, command: "kubectl get ing -n $env.ns"
                                        sshRemove remote: remote, path: "deploy.yaml"
                                        sshRemove remote: remote, path: env.secret
                            }
                        }
                      }
              }
         }

        stage('private endpoint check') {
            steps {
                script{
                         if (env.STAGING < 1 && env.PROD < 1) {
                            currentBuild.result = "FAILURE"
                            echo "Deployment fails, please check."
                        }                  
                          else if( env.STAGING >= 1){  
                              container('kubectl') {    
                                sh "sleep 60" //rolling deploy buffer             
                                POD = sh(returnStdout: true, script: "kubectl get pods -n ${NS} --sort-by=.metadata.creationTimestamp | grep ${APPNAME} | tail -n 1 | awk '{print \$1}'").trim()
                                POD_IP = sh(returnStdout: true, script: "kubectl get pods ${POD} -n ${NS} --template={{.status.podIP}}").trim()                      
                                echo "New deploy POD IP:${POD_IP}"
                                env.site = "http://${POD_IP}:${APPPORT}/${CHK_PATH}"
                                echo "Private endpoint: ${env.site}"
                                println('URL: '+ "${env.site}")                            
                                timeout(time: 30, unit: "SECONDS") {
                                    waitUntil {
                                        script {
                                            try{
                                                def response = httpRequest "${env.site}"
                                                return (response.status == 200)
                                                println('Status: '+response.status)  
                                            }
                                            catch (exception) {
                                                echo "Private endpoint get fail status code or cannot get code "
                                                currentBuild.result = "FAILURE"
                                            }                                        
                                        }
                                    }
                                }                         
                              }
                        } else if( env.PROD >= 1){                  
                                container('kubectl') {
                                  sh "sleep 60" //rolling deploy buffer 
                                  script{
                                      def remote = [:]
                                      remote.name = "kubectl-server"
                                      remote.host = "${PRDAKS}"
                                      remote.allowAnyHosts = true
                                      env.POD_SH = "kubectl get pods -n ${NS} --sort-by=.metadata.creationTimestamp | grep ${APPNAME} | tail -n 1 | awk '{print \$1}'"
                                      
                                      withCredentials([sshUserPrivateKey(credentialsId: 'aks-hk-prod-kubctl-ssh', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
                                        remote.user = userName
                                        remote.identityFile = identity
                                        remote.allowAnyHosts = true
                                        def POD = sshCommand remote: remote, command: env.POD_SH, sudo: true  

                                        env.POD_IP_SH = "kubectl get pods ${POD} -n ${NS} --template={{.status.podIP}}"
                                        def POD_IP = sshCommand remote: remote, command: env.POD_IP_SH, sudo: true                                 
                                        echo "New deploy POD IP:${POD_IP}"
                                        //env.site = "http://${POD_IP}:${APPPORT}/${CHK_PATH}"
                                        env.site = "http://${POD_IP}:${APPPORT}/test"
                                        echo "Private endpoint: ${env.site}"

                                        env.SITECHK_SH = "curl -s -o /dev/null -w \"%{http_code}\" ${env.site}"
                                          try {
                                                timeout(time: 30, unit: "SECONDS") {
                                                  waitUntil {
                                                  def SITE_CHK = sshCommand remote: remote, command: env.SITECHK_SH, sudo: true
                                                  return ("${SITE_CHK}" >= 200 && "${SITE_CHK}" <= 204) 
                                                  }
                                                }
                                                echo "timeout end"
                                              }
                                              catch(exception) {
                                                return false
                                              }      
                                          }
                                     }                          
                                  }
                              }  
                      }       
                    }
                  }    


        stage('public endpoint check') {
            steps {
                script {
                            env.site = "http://${HOST}/${CHK_PATH}"
                            println('URL: '+ "${env.site}")
                            def response = httpRequest "${env.site}"
                            println('Status: '+response.status)
                }
            }
          }
  }
    // post {

		// 	success {
		// 		slackSend channel: '#jenkins',
		// 		color: 'good',
		// 		message: "The pipeline ${currentBuild.fullDisplayName}, build successfully. Check console result at $BUILD_URL "
    //     script{ GitBuildBadge.setStatus('passing')}
		// 		}
		// 	failure {
		// 		slackSend channel: '#jenkins',
		// 		color: 'warning',
		// 		message: "The pipeline ${currentBuild.fullDisplayName}, build failed. Check console result at $BUILD_URL."
    //       script{
    //         GitBuildBadge.setStatus('failing')
    //         GitBuildBadge.setColor('pink')
    //       }
		// 		}
    // }
  
}
