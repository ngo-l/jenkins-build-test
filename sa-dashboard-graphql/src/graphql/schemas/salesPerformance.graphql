scalar Date
enum CustomerType {
  ALL
  CLIENTELING
  CORE
  POTENTIAL
  NON_CLIENTELING
  WALK_IN
}
input CustomerCountInput {
  staffId: String!
  userId: String!
  customerType: [CustomerType!]!
}
type CustomerCount {
  type: CustomerType!
  count: Int!
}
input SalesPerformanceDataInput {
  staffId: String!
  userId: String!
  startDate: Date!
  endDate: Date!
  customerType: [CustomerType!]!
}
type SalesPerformanceData {
  current: Float
  target: Float
  businessUnitAvg: Float
  currencyType: String
}

type TopBrand {
  brand: String!
  count: Int!
}
type ClientelingPerformanceMetricsOutput {
  return: SalesPerformanceData
  reach: SalesPerformanceData
  avgVisits: SalesPerformanceData
  avgDaysSinceLastPurchase: SalesPerformanceData
  topBrands: [TopBrand]
}
type SalesPerformanceMetricsOutput {
  sales: SalesPerformanceData
  orderCount: SalesPerformanceData
  avgBusinessUnitPerOrderCount:SalesPerformanceData
  avgBrandPerOrderCount: SalesPerformanceData
  avgBasketSize: SalesPerformanceData
  avgBasketAmount: SalesPerformanceData
}
extend type Query {
  customerCounts(data: CustomerCountInput): [CustomerCount]
  clientelingPerformanceMetricsData(data: SalesPerformanceDataInput): ClientelingPerformanceMetricsOutput!
  salesPerformanceMetricsData(data: SalesPerformanceDataInput): SalesPerformanceMetricsOutput
}
